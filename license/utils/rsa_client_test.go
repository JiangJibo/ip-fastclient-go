package LicenseUtils

import (
	"testing"
)

var (
	PublicKey = "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCIyBULYnHGTHVXmyfXsY2YctY0\n4cIqpjSk2530+qqn9rjDx2Pt2nU1mytOs0fIKXTGFAywB+ooOHh/RAuvWEiq/7bS\nYUremzKL1zBVfWVSGsHBHq/gTFfHHZXGFHWgW7VPjooz87IdCb2q2k4Vgz3DaE5R\n0+Z9lSk96Xf0KZx7xQIDAQAB\n-----END PUBLIC KEY-----"

	PrivateKey = "-----BEGIN RSA PRIVATE KEY-----\nMIICWwIBAAKBgQCIyBULYnHGTHVXmyfXsY2YctY04cIqpjSk2530+qqn9rjDx2Pt\n2nU1mytOs0fIKXTGFAywB+ooOHh/RAuvWEiq/7bSYUremzKL1zBVfWVSGsHBHq/g\nTFfHHZXGFHWgW7VPjooz87IdCb2q2k4Vgz3DaE5R0+Z9lSk96Xf0KZx7xQIDAQAB\nAoGAKa94omiVLg79L/7MLLMi6RQObj1jVGYk4x0/TXrbaacKdjgdH08Vq4mnsCt5\nM+pWeUuA9mDjHvDe4EJXoU+xjWCCZu6psJrM8Q+cu6VF3l4UowfaYYViKtmj0Cv1\nk4ZXgkVbA0aJbN7pkkFvbNCb4Sm5yqHbrYzmJfYLFCA4JB0CQQDXa/7Pxx6hlIQJ\nk9RT2tI6AGcycX9C+5DBoQ1elKcWC8owYPQ2NW3vqLKmeQiv6GC/NfQD5fK7CCal\nu2Lv9ytzAkEAoovrfBN+FnzZJ2YxvwXLNLVkK561h//IpUMtvECSYDgeUYUGjh49\nqhdqXbkoDI3MGckWO3vqoN2LpKxgeibd5wJAUQgilW3FK+p9sEyXNeO96Gt2Zhcj\nU8LlNLCsIsOwBi7xIzmVIz7914SRjuVAS0sR+VsGKuE4aPor73OJR9Kl2QJAWItH\nt8sWgEF6OVAeASSy0P+OlYRa9r6LGhtCKq4yDmADg/ym2Xv3s1QWCP/3pP8JE3LK\nvZR+9yo4C3grBd9uOQJAc8NHzkoUO3YTr0Jq24z2tGxb/Jj+FQb1/EPMoCSNYTFa\nSeVeYn98j/H27X0+fEGLr4b0RmXB+be6cda/+XCkEQ==\n-----END RSA PRIVATE KEY-----"

	publicKey     = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgUjrCiMOi2pX2+jMSYgG0GAgXI5Qbe55SBMLoEMBZf7aVgfyduFl/SHlwJEbgoEhGvJlDGRrCCxr4/4eaJQIDHoqsL0pEd103TWaJTaQLDs8ap4w6R9tWlMRuEVlbtlQrLzHKoh8j34YmsiZM8zKiZU6Zw+1kvnE3y1977GlF7afwTIvS/onarmq8qPISo6f4C03mOFXEp//ytCtAvC6kbYW4OIkEYDlfHFGbHdP/LBUKbQ5UP49n9470Pl/6m4gYE4ycI7qtmazYIdcCidDOVwlveyLDLEZyOkTEVu6DlwsBHkEOW0wcRS4lX1XXOwt2pxdQixiL23AIRDr62nOZQIDAQAB"
	encryptedData = []byte{124, 226, 143, 123, 70, 142, 223, 54, 116, 155, 156, 55, 26, 225, 166, 117, 166, 79, 129, 159, 247, 255, 18, 168, 152, 157, 25, 137, 207, 249, 241, 89, 162, 232, 81, 94, 128, 12, 25, 185, 66, 40, 147, 170, 107, 124, 47, 122, 1, 211, 189, 126, 151, 21, 64, 185, 231, 61, 150, 1, 102, 243, 14, 115, 70, 136, 220, 143, 185, 37, 61, 2, 225, 116, 179, 239, 96, 64, 128, 183, 63, 223, 102, 21, 113, 20, 105, 127, 171, 227, 88, 89, 37, 217, 24, 76, 16, 66, 189, 63, 133, 2, 173, 184, 64, 193, 199, 201, 1, 19, 42, 38, 182, 0, 51, 238, 16, 5, 110, 44, 88, 184, 183, 221, 58, 28, 123, 127, 247, 79, 80, 7, 181, 190, 104, 44, 103, 52, 161, 82, 31, 205, 80, 45, 191, 115, 162, 255, 112, 109, 20, 97, 207, 254, 155, 210, 225, 65, 25, 9, 255, 108, 108, 200, 134, 196, 67, 3, 97, 100, 145, 41, 45, 229, 3, 237, 106, 170, 205, 119, 19, 205, 95, 220, 78, 75, 91, 103, 158, 88, 61, 153, 40, 213, 252, 121, 212, 11, 74, 247, 25, 14, 41, 179, 17, 248, 132, 92, 110, 198, 211, 53, 248, 176, 44, 194, 77, 211, 255, 64, 152, 74, 228, 180, 149, 122, 34, 247, 202, 68, 129, 177, 146, 108, 166, 71, 228, 3, 233, 160, 98, 84, 245, 25, 135, 101, 200, 203, 167, 197, 139, 23, 77, 6, 198, 172}
)

func TestGetPublicKey(t *testing.T) {
	bytes, err := DecryptByPublicKey(publicKey, encryptedData)
	if err != nil {
		t.Log(err)
	}
	t.Log(string(bytes))
}
